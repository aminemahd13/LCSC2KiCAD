"""
3D Model exporter for KiCad format (VRML and STEP)
"""

import logging
import os
from pathlib import Path
from typing import Dict, Optional


class Model3DExporter:
    """Export 3D models for KiCad"""
    
    def __init__(self, model_data: Dict, component_name: str):
        """
        Initialize exporter
        
        Args:
            model_data: Parsed 3D model data
            component_name: Component name
        """
        self.model_data = model_data
        self.component_name = component_name
    
    def export(self, model_dir: str, overwrite: bool = False) -> bool:
        """
        Export 3D model files
        
        Args:
            model_dir: Path to .3dshapes directory
            overwrite: Whether to overwrite existing files
            
        Returns:
            True if successful
        """
        try:
            logging.info(f"Exporting 3D model to {model_dir}")
            
            # Create directory if needed
            Path(model_dir).mkdir(parents=True, exist_ok=True)
            
            # Generate model filename
            model_name = self.component_name.replace(" ", "_")
            
            success = True
            
            # Export WRL (VRML) if available
            if self.model_data.get("obj_data"):
                wrl_file = os.path.join(model_dir, f"{model_name}.wrl")
                if not os.path.exists(wrl_file) or overwrite:
                    if not self._export_wrl(wrl_file):
                        success = False
                        logging.warning("Failed to export WRL file")
            
            # Export STEP if available
            if self.model_data.get("step_data"):
                step_file = os.path.join(model_dir, f"{model_name}.step")
                if not os.path.exists(step_file) or overwrite:
                    if not self._export_step(step_file):
                        success = False
                        logging.warning("Failed to export STEP file")
            
            if success:
                logging.info(f"Successfully exported 3D model {model_name}")
            
            return success
            
        except Exception as e:
            logging.error(f"Error exporting 3D model: {e}", exc_info=True)
            return False
    
    def _export_wrl(self, output_path: str) -> bool:
        """
        Export VRML format file
        
        Args:
            output_path: Output file path
            
        Returns:
            True if successful
        """
        try:
            obj_data = self.model_data.get("obj_data")
            if not obj_data:
                return False
            
            # Convert OBJ to VRML (simplified conversion)
            # In a real implementation, you'd use a proper converter
            wrl_content = self._convert_obj_to_wrl(obj_data)
            
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(wrl_content)
            
            logging.info(f"Exported WRL to {output_path}")
            return True
            
        except Exception as e:
            logging.error(f"Error exporting WRL: {e}")
            return False
    
    def _export_step(self, output_path: str) -> bool:
        """
        Export STEP format file
        
        Args:
            output_path: Output file path
            
        Returns:
            True if successful
        """
        try:
            step_data = self.model_data.get("step_data")
            if not step_data:
                return False
            
            # Write binary STEP data
            with open(output_path, "wb") as f:
                f.write(step_data)
            
            logging.info(f"Exported STEP to {output_path}")
            return True
            
        except Exception as e:
            logging.error(f"Error exporting STEP: {e}")
            return False
    
    def _convert_obj_to_wrl(self, obj_data: str) -> str:
        """
        Convert OBJ format to VRML
        
        Based on easyeda2kicad reference implementation
        
        Args:
            obj_data: OBJ format data
            
        Returns:
            VRML format data
        """
        import re
        
        # VRML header
        wrl_content = "#VRML V2.0 utf8\n"
        wrl_content += "# 3D model generated by lcsc2kicad\n"
        
        # Extract materials
        materials = self._get_materials(obj_data)
        
        # Extract vertices
        vertices = self._get_vertices(obj_data)
        
        # Process each shape by material
        shapes = obj_data.split("usemtl")[1:]
        
        for shape in shapes:
            lines = shape.splitlines()
            if not lines:
                continue
                
            material_name = lines[0].strip()
            material = materials.get(material_name, {
                "diffuse_color": ["0.8", "0.8", "0.8"],
                "specular_color": ["0.5", "0.5", "0.5"],
                "ambient_color": ["0.2", "0.2", "0.2"],
                "transparency": "0"
            })
            
            # Build vertex list and face indices
            index_counter = 0
            link_dict = {}
            coord_index = []
            points = []
            
            for line in lines[1:]:
                line = line.strip()
                if line.startswith("f "):
                    # Parse face
                    face_parts = line.replace("//", " ").split()[1:]
                    face = [int(p.split("/")[0]) for p in face_parts if p]
                    
                    face_index = []
                    for idx in face:
                        if idx not in link_dict:
                            link_dict[idx] = index_counter
                            face_index.append(str(index_counter))
                            points.append(vertices[idx - 1])
                            index_counter += 1
                        else:
                            face_index.append(str(link_dict[idx]))
                    
                    face_index.append("-1")
                    coord_index.append(",".join(face_index) + ",")
            
            if not points:
                continue
            
            # Ensure last point appears twice (for proper closure)
            points.insert(-1, points[-1])
            
            # Generate VRML shape
            wrl_content += f"""
Shape{{
    appearance Appearance {{
        material  Material {{
            diffuseColor {' '.join(material['diffuse_color'])}
            specularColor {' '.join(material['specular_color'])}
            ambientIntensity 0.2
            transparency 0
            shininess 0.5
        }}
    }}
    geometry IndexedFaceSet {{
        ccw TRUE
        solid FALSE
        coord DEF co Coordinate {{
            point [
                {(", ").join(points)}
            ]
        }}
        coordIndex [
            {"".join(coord_index)}
        ]
    }}
}}"""
        
        return wrl_content
    
    def _get_materials(self, obj_data: str) -> dict:
        """Extract materials from OBJ data"""
        import re
        
        material_regex = "newmtl .*?endmtl"
        matches = re.findall(pattern=material_regex, string=obj_data, flags=re.DOTALL)
        
        materials = {}
        for match in matches:
            material = {
                "diffuse_color": ["0.8", "0.8", "0.8"],
                "specular_color": ["0.5", "0.5", "0.5"],
                "ambient_color": ["0.2", "0.2", "0.2"],
                "transparency": "0"
            }
            material_id = ""
            
            for value in match.splitlines():
                value = value.strip()
                if value.startswith("newmtl"):
                    material_id = value.split(" ", 1)[1]
                elif value.startswith("Ka"):
                    material["ambient_color"] = value.split()[1:]
                elif value.startswith("Kd"):
                    material["diffuse_color"] = value.split()[1:]
                elif value.startswith("Ks"):
                    material["specular_color"] = value.split()[1:]
                elif value.startswith("d "):
                    material["transparency"] = value.split()[1]
            
            if material_id:
                materials[material_id] = material
        
        return materials
    
    def _get_vertices(self, obj_data: str) -> list:
        """Extract vertices from OBJ data"""
        import re
        
        vertices_regex = r"v (.*?)\n"
        matches = re.findall(pattern=vertices_regex, string=obj_data, flags=re.DOTALL)
        
        return [
            " ".join([str(round(float(coord) / 2.54, 4)) for coord in vertex.split()])
            for vertex in matches
        ]
